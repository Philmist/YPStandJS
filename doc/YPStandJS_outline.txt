YPを作って学ぶJavascript(仮題)
==============================

何を書かなければならないか
--------------------------
- この文書について
-- 目的
-- 注意点
- node.jsのインストール
-- node.jsの簡単な紹介
-- node.jsのダウンロードとインストール
-- npmとは
-- node.jsの動作確認(コンソールで遊ぶ)
--- コンソールでHello, world!
-- 初めてのnode.jsプログラム
--- MDN(Mozilla Developer Network)のJavascriptガイドとリファレンス
--- node.jsのAPIリファレンス
--- 関数の書き方
---- 名前あり関数の書き方
---- 無名関数
---- 関数を返す
--- モジュールのエクスポート(exports)とインポート(require)
- YPStand(YP大地に立つ)について
-- YPStandの解説
-- YPStandのソース解説
--- Rubyのリファレンス
-- YPStandとPeercastStationからわかるYPに必要なPCPプロトコル仕様
--- PCPパケットの構造
--- YPとやりとりされるパケットの流れ
---- PCPのバージョン取得
---- PCP_HELO と PCP_OLEH によるPCPハンドシェイクの確立
---- (参考)ポートの開放確認のやり方
---- PCP_BCSTとその中に含まれるYPに必要な情報(PCP_CHANとPCP_HOST)
---- PCP接続の切断(PCP_QUIT)と注意点
- YPStandJSを作る
-- パケットを読むだけのサーバーを作る
--- ソースコードの紹介
--- node.jsのイベントシステムについて
---- イベント駆動の考え方
---- ブロッキングとノンブロッキング
--- ソースコードの解説
---- onとonceでつなげる
---- node.jsでバイナリを扱うためのBuffer型
-- PCPの定数一覧を作る
--- structの代わりは？
---- みんなみんなオブジェクト
---- オブジェクトを作るには(またはオブジェクトの説明)
---- util.inspectについて
---- クラス関数の代わり
---- thisってなぁに？
---- オブジェクトに属する関数をprototypeで作る
--- 定数一覧を作る
-- Atomを読み込んでみる
--- (失敗する)Atomの読み込み方
--- なぜ失敗するのか考える
--- ステート(状態)という考え方
--- ステートを踏まえてAtomを読み込んでみる
-- PCPハンドシェイクをしてみる
--- PCPハンドシェイクの流れ(復習)
--- ステート再び
--- 接続状態を保存する
--- Router、そしてHandler
--- 例外を投げる、捕まえる
--- PCP_HELOを受信してPCP_OLEHを送り返す
-- ひたすらAtomを処理する
--- チャンネル情報をどうやって共有するか
--- PCP_CHANとPCP_HOSTを処理する
---- 各種情報を分離して保存する
--- PCP_QUITを処理する
-- YPを表示する(Expressを使う)
--- "Express"の紹介
--- expressコマンドでひな形を作る
--- package.jsonとnpm -d install
--- ViewとRoute
--- ルータに変数を渡すには(ルートミドルウェア)
--- Jadeを使う
--- index.txtを作る
- あとがき

